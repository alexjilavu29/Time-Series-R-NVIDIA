mutate(Year = year(Data)) %>%
mutate(Month = month(Data)) %>%
group_by(Year, Month) %>%
summarise(Petrol = mean(Petrol))
# Concatenarea datelor lunare
gas_oil_month <- cbind(gas_oil_month, oil_prices_month$Petrol)
# Scrierea corecta a datei
gas_oil_month$Date <- as.Date(paste(gas_oil_month$Year, gas_oil_month$Month, "01", sep = "-"))
# Stergerea coloanelor Year si Month
gas_oil_month <- gas_oil_month[, -c(1,2)]
# Redenumirea coloanelor
colnames(gas_oil_month) <- c("Benzina","Motorina","Petrol","Date")
# Crearea unui data frame cu row.names = Date
gas_oil_month <- data.frame(gas_oil_month[,c(1,2,3)], row.names = gas_oil_month$Date)
gas_oil_month
dim(gas_oil_month)
# Scatterplot
ggplot(data = gas_oil) +
geom_point(mapping = aes(x = gas_oil$Benzina, y = gas_oil$Petrol)) +
xlab('Pret Benzina') +
ylab('Pret Baril de Petrol') +
ggtitle('Norul de puncte dintre benzina si petrol')+
theme_bw()
# Scatterplot LUNAR
ggplot(data = gas_oil_month) +
geom_point(mapping = aes(x = gas_oil_month$Benzina, y = gas_oil_month$Petrol)) +
xlab('Pret Benzina') +
ylab('Pret Baril de Petrol') +
ggtitle('Norul de puncte dintre benzina si petrol')+
theme_bw()
# Declaram variabilele de tip ts
benzina_ts <- ts(gas_oil$Benzina, start = 2015, frequency = 12)
petrol_ts <-ts(gas_oil$Petrol, start = 2015, frequency = 12)
benzina_ts
# Declaram variabilele de tip ts
benzina_ts <- ts(gas_oil$Benzina, start = c(2015,8), frequency = 12)
benzina_ts
gas_oil_month
benzina_ts <- window(benzina_ts, start=c(2015,8), end=c(2024,5))
petrol_ts <- window(petrol_ts, start=c(2015,8), end=c(2024,5))
# Graficul seriilor
autoplot(cbind(benzina_ts,petrol_ts)) +
ylab('') +
ggtitle('Graficul seriilor') +
theme_bw()
# Normalizarea datelor
benzina_ts <- (benzina_ts - mean(benzina_ts)) / sd(benzina_ts)
petrol_ts <- (petrol_ts - mean(petrol_ts)) / sd(petrol_ts)
# Graficul seriilor
autoplot(cbind(benzina_ts,petrol_ts)) +
ylab('') +
ggtitle('Graficul seriilor') +
theme_bw()
# Determinarea persistentei modelului
ggtsdisplay(benzina_ts)
ggtsdisplay(petrol_ts)
# Determinarea persistentei modelului
ggtsdisplay(benzina_ts)
ggtsdisplay(petrol_ts)
# Testarea stationaritatii seriilor (am ales varianta cea mai complexa a ADF)
adf.benzina <- ur.df(benzina_ts, type = "trend", selectlags = "AIC")
# Testarea stationaritatii seriilor (am ales varianta cea mai complexa a ADF)
adf.benzina <- ur.df(benzina_ts, type = "trend", selectlags = "AIC")
summary(adf.benzina) # serie stationara
adf.petrol <- ur.df(petrol_ts, type = "trend", selectlags = "AIC")
summary(adf.petrol) # serie stationara
ndiffs(benzina_ts)
ndiffs(petrol_ts)
# Calculul procentajelor de schimbare
benzina_diff <- diff(benina_ts)
prices_diff <- diff(petrol_ts)
ggtsdisplay(benzina_diff)
# Calculul procentajelor de schimbare
benzina_diff <- diff(benina_ts)
prices_diff <- diff(petrol_ts)
# Calculul procentajelor de schimbare
benzina_diff <- diff(benzina_ts)
prices_diff <- diff(petrol_ts)
ggtsdisplay(benzina_diff)
ggtsdisplay(petrol_diff)
petrol_diff <- diff(petrol_ts)
ggtsdisplay(benzina_diff)
ggtsdisplay(petrol_diff)
# Testarea stationaritatii seriilor DIFERENTIATE (am ales varianta cea mai complexa a ADF)
adf.benzina <- ur.df(benzina_diff, type = "trend", selectlags = "AIC")
summary(adf.benzina) # serie nestationara
adf.petrol <- ur.df(petrol_diff, type = "trend", selectlags = "AIC")
summary(adf.petrol) # serie nestationara
ndiffs(benzina_ts)
ndiffs(benzina_diff)
ndiffs(petrol_diff)
autoplot(cbind(benzina_diff,petrol_diff)) +
ylab('') +
ggtitle('Graficul seriilor diferentiate') +
theme_bw()
# Citirea valorilor din fisierul absolventi.csv si crearea unui dataframe
absolventi <- read.csv("absolventi.csv", header = TRUE, sep = ",")
absolventi <- absolventi[order(absolventi$An),]
# Citirea valorilor din fisierul unitati_invatamant.csv si crearea unui dataframe
unitati_invatamant <- read.csv("unitati_invatamant.csv", header = TRUE, sep = ",")
unitati_invatamant <- unitati_invatamant[order(unitati_invatamant$An),]
absolventi
# Citirea valorilor din fisierul unitati_invatamant.csv si crearea unui dataframe
unitati_invatamant <- read.csv("unitati_invatamant.csv", header = TRUE, sep = ",")
unitati_invatamant <- unitati_invatamant[order(unitati_invatamant$An),]
# Citirea valorilor din fisierul unitati_invatamant.csv si crearea unui dataframe
unitati_invatamant <- read.csv("unitati_invatamant.csv", header = TRUE, sep = ",")
unitati_invatamant <- unitati_invatamant[order(unitati_invatamant$An),]
unitati_invatamant
absolventi
# Citirea primelor 32 de inregistrari ale valorilor din absolventi si unitati_invatamant si crearea unui dataframe cu row.names = Ani
absolventi_unitati <- data.frame(absolventi[,2], unitati_invatamant[,2], row.names = absolventi$Ani)
# Citirea valorilor din fisierul absolventi.csv si crearea unui dataframe
absolventi <- read.csv("absolventi.csv", header = TRUE, sep = ",")
absolventi <- absolventi[order(absolventi$An),1:32]
absolventi <- absolventi[1:32,]
absolventi
# Citirea valorilor din fisierul absolventi.csv si crearea unui dataframe
absolventi <- read.csv("absolventi.csv", header = TRUE, sep = ",")
absolventi <- absolventi[1:32,]
absolventi <- absolventi[order(absolventi$An),]
# Citirea valorilor din fisierul unitati_invatamant.csv si crearea unui dataframe
unitati_invatamant <- read.csv("unitati_invatamant.csv", header = TRUE, sep = ",")
unitati_invatamant <- unitati_invatamant[1:32,]
unitati_invatamant <- unitati_invatamant[order(unitati_invatamant$An),]
# Citirea valorilor din absolventi si unitati_invatamant si crearea unui dataframe cu row.names = Ani
absolventi_unitati <- data.frame(absolventi[,2], unitati_invatamant[,2], row.names = absolventi$Ani)
absolventi_unitati
colnames(absolventi_unitati)=c("Absolventi","Unitati")
# Scatterplot
ggplot(data = absolventi_unitati) +
geom_point(mapping = aes(x = absolventi_unitati$Absolventi, y = absolventi_unitati$Unitati)) +
xlab('Numar Absolventi') +
ylab('Numar Unitati de Invatamant') +
ggtitle('Norul de puncte dintre numarul de absolventi si numarul de unitati de invatamant')+
theme_bw()
# Declaram variabilele de tip ts
absolventi_ts <- ts(absolventi_unitati$Absolventi, start = 1990, frequency = 1)
absolventi_ts
# Declaram variabilele de tip ts
absolventi_ts <- ts(absolventi_unitati$Absolventi, start = 1990, frequency = 12)
absolventi_ts
# Declaram variabilele de tip ts
absolventi_ts <- ts(absolventi_unitati$Absolventi, start = 1990, frequency = 4)
absolventi_ts
# Declaram variabilele de tip ts
absolventi_ts <- ts(absolventi_unitati$Absolventi, start = 1990, frequency = 1)
absolventi_ts
# Declaram variabilele de tip ts
absolventi_ts <- ts(absolventi_unitati$Absolventi, start = 1990, frequency = 1)
unitati_ts <- ts(absolventi_unitati$Unitati, start = 1990, frequency = 1)
absolventi_ts <- window(absolventi_ts, start=1990, end=2021)
unitati_ts <- window(unitati_ts, start=1990, end=2021)
absolventi_ts
# Normalizarea datelor
absolventi_ts <- (absolventi_ts - mean(absolventi_ts)) / sd(absolventi_ts)
unitati_ts <- (unitati_ts - mean(unitati_ts)) / sd(unitati_ts)
# Graficul seriilor
autoplot(cbind(absolventi_ts,unitati_ts)) +
ylab('') +
ggtitle('Graficul seriilor') +
theme_bw()
autoplot(cbind(absolventi_diff,unitati_diff)) +
ylab('') +
ggtitle('Graficul seriilor diferentiate') +
theme_bw()
# Calculul procentajelor de schimbare
absolventi_diff <- diff(absolventi_ts)
unitati_diff <- diff(unitati_ts)
autoplot(cbind(absolventi_diff,unitati_diff)) +
ylab('') +
ggtitle('Graficul seriilor diferentiate') +
theme_bw()
# Determinarea persistentei modelului
ggtsdisplay(absolventi_ts)
ggtsdisplay(unitati_ts)
ggtsdisplay(absolventi_diff)
ggtsdisplay(unitati_diff)
# Testarea stationaritatii seriilor (am ales varianta cea mai complexa a ADF)
adf.absolventi <- ur.df(absolventi_ts, type = "trend", selectlags = "AIC")
summary(adf.absolventi) # serie nestationara
adf.unitati <- ur.df(unitati_ts, type = "trend", selectlags = "AIC")
summary(adf.unitati) # serie nestationara
ndiffs(absolventi_ts)
ndiffs(unitati_ts)
# Testarea stationaritatii seriilor DIFERENTIATE (am ales varianta cea mai complexa a ADF)
adf.absolventi <- ur.df(absolventi_diff, type = "trend", selectlags = "AIC")
summary(adf.absolventi) # serie nestationara
adf.unitati <- ur.df(unitati_diff, type = "trend", selectlags = "AIC")
summary(adf.unitati) # serie nestationara
ndiffs(absolventi_diff)
ndiffs(unitati_diff)
# Citirea cresterii pib-ului din fisierul crestere_pib.csv si crearea unui dataframe
crestere_pib <- read.csv("crestere_pib.csv", header = TRUE, sep = ",")
crestere_pib <- crestere_pib[1:32,]
crestere_pib <- crestere_pib[order(crestere_pib$An),]
crestere_pib
# Citirea valorilor din absolventi si unitati_invatamant si crearea unui dataframe cu row.names = Ani
absolventi_unitati <- data.frame(absolventi[,2], unitati_invatamant[,2], row.names = absolventi$Ani)
colnames(absolventi_unitati)=c("Absolventi","Unitati")
# Adaugarea cresterii pib-ului in dataframe-ul absolventi_unitati
absolventi_unitati$Crestere_PIB <- crestere_pib[,2]
# Adaugarea cresterii pib-ului in dataframe-ul absolventi_unitati
absolventi_unitati$Crestere_PIB <- crestere_pib[,2]
colnames(absolventi_unitati)=c("Absolventi","Unitati","Crestere PIB")
ggplot(data = absolventi_unitati) +
geom_point(mapping = aes(x = absolventi_unitati$Unitati, y = absolventi_unitati$`Crestere PIB`)) +
xlab('Numar Unitati de Invatamant') +
ylab('Cresterea PIB-ului') +
ggtitle('Norul de puncte dintre numarul de unitati de invatamant si procentajul de crestere a PIB-ului national')+
theme_bw()
ggplot(data = absolventi_unitati) +
geom_point(mapping = aes(x = absolventi_unitati$Unitati, y = absolventi_unitati$`Crestere PIB`)) +
xlab('Numar Unitati de Invatamant') +
ylab('Cresterea PIB-ului') +
ggtitle('Norul de puncte dintre nr de unitati de invatamant si % de crestere a PIB-ului')+
theme_bw()
# Declaram variabilele de tip ts
absolventi_ts <- ts(absolventi_unitati$Absolventi, start = 1990, frequency = 1)
unitati_ts <- ts(absolventi_unitati$Unitati, start = 1990, frequency = 1)
crestere_pib_ts <- ts(absolventi_unitati$`Crestere PIB`, start = 1990, frequency = 1)
absolventi_ts <- window(absolventi_ts, start=1990, end=2021)
unitati_ts <- window(unitati_ts, start=1990, end=2021)
crestere_pib_ts <- window(crestere_pib_ts, start=1990, end=2021)
# Normalizarea datelor
absolventi_ts <- (absolventi_ts - mean(absolventi_ts)) / sd(absolventi_ts)
unitati_ts <- (unitati_ts - mean(unitati_ts)) / sd(unitati_ts)
crestere_pib_ts <- (crestere_pib_ts - mean(crestere_pib_ts)) / sd(crestere_pib_ts)
# Calculul procentajelor de schimbare
absolventi_diff <- diff(absolventi_ts)
unitati_diff <- diff(unitati_ts)
crestere_pib_diff <- diff(crestere_pib_ts)
# Graficul seriilor
autoplot(cbind(absolventi_ts,unitati_ts,crestere_pib_ts)) +
ylab('') +
ggtitle('Graficul seriilor') +
theme_bw()
crestere_pib_ts
crestere_pib_ts <- ts(absolventi_unitati$`Crestere PIB`, start = 1990, frequency = 1)
absolventi_ts <- window(absolventi_ts, start=1990, end=2021)
unitati_ts <- window(unitati_ts, start=1990, end=2021)
crestere_pib_ts <- window(crestere_pib_ts, start=1990, end=2021)
# Normalizarea datelor
absolventi_ts <- (absolventi_ts - mean(absolventi_ts)) / sd(absolventi_ts)
unitati_ts <- (unitati_ts - mean(unitati_ts)) / sd(unitati_ts)
crestere_pib_ts <- (crestere_pib_ts - mean(crestere_pib_ts)) / sd(crestere_pib_ts)
# Calculul procentajelor de schimbare
absolventi_diff <- diff(absolventi_ts)
unitati_diff <- diff(unitati_ts)
crestere_pib_diff <- diff(crestere_pib_ts)
# Graficul seriilor
autoplot(cbind(absolventi_ts,unitati_ts,crestere_pib_ts)) +
ylab('') +
ggtitle('Graficul seriilor') +
theme_bw()
crestere_pib_ts
# Citirea valorilor din fisierul unitati_invatamant.csv si crearea unui dataframe
unitati_invatamant <- read.csv("unitati_invatamant.csv", header = TRUE, sep = ",")
unitati_invatamant <- unitati_invatamant[1:32,]
unitati_invatamant <- unitati_invatamant[order(unitati_invatamant$An),]
# Citirea cresterii pib-ului din fisierul crestere_pib.csv si crearea unui dataframe
crestere_pib <- read.csv("crestere_pib.csv", header = TRUE, sep = ",")
crestere_pib <- crestere_pib[1:32,]
crestere_pib <- crestere_pib[order(crestere_pib$An),]
# Citirea valorilor din absolventi si unitati_invatamant si crearea unui dataframe cu row.names = Ani
absolventi_unitati <- data.frame(absolventi[,2], unitati_invatamant[,2], row.names = absolventi$Ani)
# Adaugarea cresterii pib-ului in dataframe-ul absolventi_unitati
absolventi_unitati$Crestere_PIB <- crestere_pib[,2]
colnames(absolventi_unitati)=c("Absolventi","Unitati","Crestere PIB")
# Scatterplot
ggplot(data = absolventi_unitati) +
geom_point(mapping = aes(x = absolventi_unitati$Absolventi, y = absolventi_unitati$Unitati)) +
xlab('Numar Absolventi') +
ylab('Numar Unitati de Invatamant') +
ggtitle('Norul de puncte dintre numarul de absolventi si numarul de unitati de invatamant')+
theme_bw()
ggplot(data = absolventi_unitati) +
geom_point(mapping = aes(x = absolventi_unitati$Unitati, y = absolventi_unitati$`Crestere PIB`)) +
xlab('Numar Unitati de Invatamant') +
ylab('Cresterea PIB-ului') +
ggtitle('Norul de puncte dintre nr de unitati de invatamant si % de crestere a PIB-ului')+
theme_bw()
# Declaram variabilele de tip ts
absolventi_ts <- ts(absolventi_unitati$Absolventi, start = 1990, frequency = 1)
crestere_pib
absolventi_unitati$Crestere_PIB
# Citirea valorilor din fisierul absolventi.csv si crearea unui dataframe
absolventi <- read.csv("absolventi.csv", header = TRUE, sep = ",")
absolventi <- absolventi[2:32,]
absolventi <- absolventi[order(absolventi$An),]
# Citirea valorilor din fisierul unitati_invatamant.csv si crearea unui dataframe
unitati_invatamant <- read.csv("unitati_invatamant.csv", header = TRUE, sep = ",")
unitati_invatamant <- unitati_invatamant[2:32,]
unitati_invatamant <- unitati_invatamant[order(unitati_invatamant$An),]
# Citirea cresterii pib-ului din fisierul crestere_pib.csv si crearea unui dataframe
crestere_pib <- read.csv("crestere_pib.csv", header = TRUE, sep = ",")
crestere_pib <- crestere_pib[2:32,]
crestere_pib <- crestere_pib[order(crestere_pib$An),]
# Citirea valorilor din absolventi si unitati_invatamant si crearea unui dataframe cu row.names = Ani
absolventi_unitati <- data.frame(absolventi[,2], unitati_invatamant[,2], row.names = absolventi$Ani)
# Adaugarea cresterii pib-ului in dataframe-ul absolventi_unitati
absolventi_unitati$Crestere_PIB <- crestere_pib[,2]
colnames(absolventi_unitati)=c("Absolventi","Unitati","Crestere PIB")
# Scatterplot
ggplot(data = absolventi_unitati) +
geom_point(mapping = aes(x = absolventi_unitati$Absolventi, y = absolventi_unitati$Unitati)) +
xlab('Numar Absolventi') +
ylab('Numar Unitati de Invatamant') +
ggtitle('Norul de puncte dintre numarul de absolventi si numarul de unitati de invatamant')+
theme_bw()
ggplot(data = absolventi_unitati) +
geom_point(mapping = aes(x = absolventi_unitati$Unitati, y = absolventi_unitati$`Crestere PIB`)) +
xlab('Numar Unitati de Invatamant') +
ylab('Cresterea PIB-ului') +
ggtitle('Norul de puncte dintre nr de unitati de invatamant si % de crestere a PIB-ului')+
theme_bw()
# Declaram variabilele de tip ts
absolventi_ts <- ts(absolventi_unitati$Absolventi, start = 1990, frequency = 1)
unitati_ts <- ts(absolventi_unitati$Unitati, start = 1990, frequency = 1)
crestere_pib_ts <- ts(absolventi_unitati$`Crestere PIB`, start = 1990, frequency = 1)
# Declaram variabilele de tip ts
absolventi_ts <- ts(absolventi_unitati$Absolventi, start = 1991, frequency = 1)
unitati_ts <- ts(absolventi_unitati$Unitati, start = 1991, frequency = 1)
crestere_pib_ts <- ts(absolventi_unitati$`Crestere PIB`, start = 1991, frequency = 1)
absolventi_ts <- window(absolventi_ts, start=1991, end=2021)
unitati_ts <- window(unitati_ts, start=1991, end=2021)
crestere_pib_ts <- window(crestere_pib_ts, start=1991, end=2021)
# Normalizarea datelor
absolventi_ts <- (absolventi_ts - mean(absolventi_ts)) / sd(absolventi_ts)
unitati_ts <- (unitati_ts - mean(unitati_ts)) / sd(unitati_ts)
crestere_pib_ts <- (crestere_pib_ts - mean(crestere_pib_ts)) / sd(crestere_pib_ts)
# Calculul procentajelor de schimbare
absolventi_diff <- diff(absolventi_ts)
unitati_diff <- diff(unitati_ts)
crestere_pib_diff <- diff(crestere_pib_ts)
# Graficul seriilor
autoplot(cbind(absolventi_ts,unitati_ts,crestere_pib_ts)) +
ylab('') +
ggtitle('Graficul seriilor') +
theme_bw()
autoplot(cbind(absolventi_diff,unitati_diff,crestere_pib_diff)) +
ylab('') +
ggtitle('Graficul seriilor diferentiate') +
theme_bw()
# Determinarea persistentei modelului
ggtsdisplay(absolventi_ts)
ggtsdisplay(unitati_ts)
ggtsdisplay(crestere_pib_ts)
ggtsdisplay(absolventi_diff)
ggtsdisplay(unitati_diff)
ggtsdisplay(crestere_pib_diff)
# Testarea stationaritatii seriilor (am ales varianta cea mai complexa a ADF)
adf.absolventi <- ur.df(absolventi_ts, type = "trend", selectlags = "AIC")
summary(adf.absolventi) # serie nestationara
adf.unitati <- ur.df(unitati_ts, type = "trend", selectlags = "AIC")
summary(adf.unitati) # serie nestationara
adf.crestere_pib <- ur.df(crestere_pib_ts, type = "trend", selectlags = "AIC")
summary(adf.crestere_pib) # serie nestationara
ndiffs(absolventi_ts)
ndiffs(unitati_ts)
ndiffs(crestere_pib_ts)
# Testarea stationaritatii seriilor DIFERENTIATE (am ales varianta cea mai complexa a ADF)
adf.absolventi <- ur.df(absolventi_diff, type = "trend", selectlags = "AIC")
summary(adf.absolventi) # serie nestationara
adf.unitati <- ur.df(unitati_diff, type = "trend", selectlags = "AIC")
summary(adf.unitati) # serie nestationara
adf.crestere_pib <- ur.df(crestere_pib_diff, type = "trend", selectlags = "AIC")
summary(adf.crestere_pib) # serie nestationara
ndiffs(absolventi_diff)
ndiffs(unitati_diff)
ndiffs(crestere_pib_diff)
ndiffs(absolventi_ts)
ndiffs(unitati_ts)
ndiffs(crestere_pib_ts)
# Citirea valorilor din fisierul absolventi.csv si crearea unui dataframe
absolventi <- read.csv("absolventi.csv", header = TRUE, sep = ",")
absolventi <- absolventi[2:32,]
absolventi <- absolventi[order(absolventi$Ani),]
absolventi
# Citirea valorilor din fisierul unitati_invatamant.csv si crearea unui dataframe
unitati_invatamant <- read.csv("unitati_invatamant.csv", header = TRUE, sep = ",")
unitati_invatamant <- unitati_invatamant[2:32,]
unitati_invatamant <- unitati_invatamant[order(unitati_invatamant$Ani),]
# Citirea cresterii pib-ului din fisierul crestere_pib.csv si crearea unui dataframe
crestere_pib <- read.csv("crestere_pib.csv", header = TRUE, sep = ",")
crestere_pib <- crestere_pib[2:32,]
crestere_pib <- crestere_pib[order(crestere_pib$Ani),]
# Citirea numarului de biblioteci din fisierul biblioteci.csv si crearea unui dataframe
biblioteci <- read.csv("biblioteci.csv", header = TRUE, sep = ",")
biblioteci <- biblioteci[2:32,]
biblioteci <- biblioteci[order(biblioteci$Ani),]
# Citirea valorilor din fisierul absolventi.csv si crearea unui dataframe
absolventi <- read.csv("absolventi.csv", header = TRUE, sep = ",")
absolventi <- absolventi[2:32,]
absolventi <- absolventi[order(absolventi$Ani),]
# Citirea valorilor din fisierul unitati_invatamant.csv si crearea unui dataframe
unitati_invatamant <- read.csv("unitati_invatamant.csv", header = TRUE, sep = ",")
unitati_invatamant <- unitati_invatamant[2:32,]
unitati_invatamant <- unitati_invatamant[order(unitati_invatamant$Ani),]
# Citirea cresterii pib-ului din fisierul crestere_pib.csv si crearea unui dataframe
crestere_pib <- read.csv("crestere_pib.csv", header = TRUE, sep = ",")
crestere_pib <- crestere_pib[2:32,]
crestere_pib <- crestere_pib[order(crestere_pib$Ani),]
# Citirea numarului de biblioteci din fisierul biblioteci.csv si crearea unui dataframe
biblioteci <- read.csv("biblioteci.csv", header = TRUE, sep = ",")
biblioteci <- biblioteci[2:32,]
biblioteci <- biblioteci[order(biblioteci$Ani),]
# Citirea valorilor din absolventi si unitati_invatamant si crearea unui dataframe cu row.names = Ani
absolventi_unitati <- data.frame(absolventi[,2], unitati_invatamant[,2], row.names = absolventi$Ani)
# Adaugarea cresterii pib-ului in dataframe-ul absolventi_unitati
absolventi_unitati$Crestere_PIB <- crestere_pib[,2]
# Adaugarea numarului de biblioteci in dataframe-ul absolventi_unitati
absolventi_unitati$Biblioteci <- biblioteci[,2]
colnames(absolventi_unitati)=c("Absolventi","Unitati","Crestere PIB","Biblioteci")
# Scatterplot
ggplot(data = absolventi_unitati) +
geom_point(mapping = aes(x = absolventi_unitati$Absolventi, y = absolventi_unitati$Unitati)) +
xlab('Numar Absolventi') +
ylab('Numar Unitati de Invatamant') +
ggtitle('Norul de puncte dintre numarul de absolventi si numarul de unitati de invatamant')+
theme_bw()
ggplot(data = absolventi_unitati) +
geom_point(mapping = aes(x = absolventi_unitati$Unitati, y = absolventi_unitati$`Crestere PIB`)) +
xlab('Numar Unitati de Invatamant') +
ylab('Cresterea PIB-ului') +
ggtitle('Norul de puncte dintre nr de unitati de invatamant si % de crestere a PIB-ului')+
theme_bw()
# Declaram variabilele de tip ts
absolventi_ts <- ts(absolventi_unitati$Absolventi, start = 1991, frequency = 1)
unitati_ts <- ts(absolventi_unitati$Unitati, start = 1991, frequency = 1)
crestere_pib_ts <- ts(absolventi_unitati$`Crestere PIB`, start = 1991, frequency = 1)
biblioteci_ts <- ts(absolventi_unitati$Biblioteci, start = 1991, frequency = 1)
absolventi_ts <- window(absolventi_ts, start=1991, end=2021)
unitati_ts <- window(unitati_ts, start=1991, end=2021)
crestere_pib_ts <- window(crestere_pib_ts, start=1991, end=2021)
biblioteci_ts <- window(biblioteci_ts, start=1991, end=2021)
# Normalizarea datelor
absolventi_ts <- (absolventi_ts - mean(absolventi_ts)) / sd(absolventi_ts)
unitati_ts <- (unitati_ts - mean(unitati_ts)) / sd(unitati_ts)
crestere_pib_ts <- (crestere_pib_ts - mean(crestere_pib_ts)) / sd(crestere_pib_ts)
biblioteci_ts <- (biblioteci_ts - mean(biblioteci_ts)) / sd(biblioteci_ts)
# Calculul procentajelor de schimbare
absolventi_diff <- diff(absolventi_ts)
unitati_diff <- diff(unitati_ts)
crestere_pib_diff <- diff(crestere_pib_ts)
biblioteci_diff <- diff(biblioteci_ts)
# Graficul seriilor
autoplot(cbind(absolventi_ts,unitati_ts,crestere_pib_ts)) +
ylab('') +
ggtitle('Graficul seriilor') +
theme_bw()
# Graficul seriilor
autoplot(cbind(absolventi_ts,unitati_ts,crestere_pib_ts,biblioteci_ts)) +
ylab('') +
ggtitle('Graficul seriilor') +
theme_bw()
# Graficul seriilor
autoplot(cbind(absolventi_ts,unitati_ts,crestere_pib_ts,biblioteci_ts)) +
ylab('') +
ggtitle('Graficul seriilor') +
theme_bw()
autoplot(cbind(absolventi_diff,unitati_diff,crestere_pib_diff)) +
ylab('') +
ggtitle('Graficul seriilor diferentiate') +
theme_bw()
autoplot(cbind(absolventi_diff,unitati_diff,crestere_pib_diff,biblioteci_diff)) +
ylab('') +
ggtitle('Graficul seriilor diferentiate') +
theme_bw()
# Determinarea persistentei modelului
ggtsdisplay(absolventi_ts)
ggtsdisplay(unitati_ts)
ggtsdisplay(crestere_pib_ts)
ggtsdisplay(biblioteci_ts)
ggtsdisplay(absolventi_diff)
ggtsdisplay(unitati_diff)
ggtsdisplay(crestere_pib_diff)
ggtsdisplay(biblioteci_diff)
# Testarea stationaritatii seriilor (am ales varianta cea mai complexa a ADF)
adf.absolventi <- ur.df(absolventi_ts, type = "trend", selectlags = "AIC")
summary(adf.absolventi) # serie
adf.unitati <- ur.df(unitati_ts, type = "trend", selectlags = "AIC")
summary(adf.unitati) # serie
adf.crestere_pib <- ur.df(crestere_pib_ts, type = "trend", selectlags = "AIC")
summary(adf.crestere_pib) # serie
adf.biblioteci <- ur.df(biblioteci_ts, type = "trend", selectlags = "AIC")
summary(adf.biblioteci) # serie
ndiffs(absolventi_ts)
ndiffs(unitati_ts)
ndiffs(crestere_pib_ts)
ndiffs(biblioteci_ts)
# Testarea stationaritatii seriilor DIFERENTIATE (am ales varianta cea mai complexa a ADF)
adf.absolventi <- ur.df(absolventi_diff, type = "trend", selectlags = "AIC")
summary(adf.absolventi) # serie
adf.unitati <- ur.df(unitati_diff, type = "trend", selectlags = "AIC")
summary(adf.unitati) # serie
adf.crestere_pib <- ur.df(crestere_pib_diff, type = "trend", selectlags = "AIC")
summary(adf.crestere_pib) # serie
adf.biblioteci <- ur.df(biblioteci_diff, type = "trend", selectlags = "AIC")
summary(adf.biblioteci) # serie
ndiffs(absolventi_diff)
ndiffs(unitati_diff)
ndiffs(crestere_pib_diff)
ndiffs(biblioteci_diff)
ndiffs(absolventi_ts)
ndiffs(unitati_ts)
ndiffs(crestere_pib_ts)
ndiffs(biblioteci_ts)
ndiffs(absolventi_diff)
ndiffs(unitati_diff)
ndiffs(crestere_pib_diff)
ndiffs(biblioteci_diff)
